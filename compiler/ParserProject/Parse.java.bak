
/**
 *  Jacob Malimban
 *
 *  Receives tokens from lex()
 */
import java.io.*;
import java.lang.Character;

public class Parse {

 // variables
 private static boolean assigned, error;
 static Token nextToken;
 static String fileName = "sourceStatements.txt";
 static String line = null;

 public static void main(String[] args) {
  
  try {
   // print to file?
   if(false) {
    PrintStream o = new PrintStream(new File("parseOut.txt"));
    System.setOut(o);
   }
  } catch (FileNotFoundException e) {}


  for(int i = 0; i < 52; i++)
   System.out.print("*");    // formatting
  System.out.println("\nJacob M. Student, CSCI4200, Fall 2019, Parser");
  for(int i = 0; i < 52; i++)
   System.out.print("*");
  System.out.println();

  // try creating readers
  try {
   FileReader fReader = new FileReader(fileName);
   BufferedReader bReader = new BufferedReader(fReader);

   // read input line by line, and build lexemes in each line
   while((line = bReader.readLine()) != null) {
    assigned = error = false;
    System.out.println("Parsing the statement: "+line);
    LexicalAnalyzer.line = line;
    LexicalAnalyzer.EOL();
    nextToken = LexicalAnalyzer.lex();
    
    if(nextToken != Token.IDENT) {
     System.out.println("First Ident not found");
     continue;
    }

    nextToken = LexicalAnalyzer.lex();
    tokenLogic(); //loop

    for(int i = 0; i < 52; i++)
     System.out.print("*");
    System.out.println();
   }

   // end of file reached
   bReader.close();

   System.out.println("END_OF_FILE");

  } catch (Exception e) {
   System.out.println("Error - file unopenable or readers not initialized."
     + "\nIs the file name \"sourceStatements.txt?\"");
  }
 }


 /**
  *  Decides what to do with tokens
  *  Guarantees EOL reached
  *
  */
 private static void tokenLogic() {
  while(nextToken != Token.END_OF_LINE) {
   
   switch(nextToken) {
    case INT_LIT:
     expr();//factor();
     break;
    case IDENT:
     expr();//factor();
     break;
    case ASSIGN_OP:
     if(assigned) {
       System.out.println("Can't assign twice in one line.");
       return;
     }
     assign();
     break;
    case LEFT_PAREN:
     expr();//factor();
     break;
    default:
     System.out.println("Misplaced token.");
     return;
   }
   if(error)
	return;
  }
 }


 /**
  *  Parses string in the language generated by the rule:
  *  <assign> --> id = <expr>
  *
  */
 private static void assign() {
  if(!assigned)
    assigned = true;

  System.out.println("Enter <assign>");

  nextToken = LexicalAnalyzer.lex();

  expr();

  System.out.println("Exit <assign>");
 }

 /**
  *  Parses strings in the language generated by the rule:
  *  <expr> --> <term> { (+ | -) <term> }
  *
  */
 private static void expr() {
  System.out.println("Enter <expr>");

  // parse first term
  term();

  while(nextToken == Token.ADD_OP || nextToken == Token.SUB_OP) {
System.out.println("\t\t\tadd");
   nextToken = LexicalAnalyzer.lex();
   term();
   if(error)
      return;
  }
  System.out.println("Exit <expr>");
 }

 /**
  *  Parses strings in language generated by the rule:
  *  <term> --> <factor> { (* | /) <factor> }
  *
  */
 private static void term() {
  System.out.println("Enter <term>");

  factor();

  while(nextToken == Token.MULT_OP || nextToken == Token.DIV_OP) {
System.out.println("\t\t\tmult");
   nextToken = LexicalAnalyzer.lex();
   factor();
   if(error)
      return;
  }
  System.out.println("Exit <term>");
 }

 /**
  *  Parses strings in the language generated by the rule:
  *  <factor> --> id | int_const | ( <expr> )
  *
  */
 private static void factor() {
  System.out.println("Enter <factor>");

  // get next Token
  if(nextToken == Token.IDENT || nextToken == Token.INT_LIT)
   nextToken = LexicalAnalyzer.lex();
  else {
   if(nextToken == Token.LEFT_PAREN) {
    nextToken = LexicalAnalyzer.lex();
    expr();
    if(nextToken == Token.RIGHT_PAREN)
     nextToken = LexicalAnalyzer.lex();
    else
     System.out.println("Error, Right Paren not found."); //error();
     error = true;
   } else {
     System.out.println("Error, there's a missing factor or arithmetic nonsense.");
     error = true;
   }
  }
  System.out.println("Exit <factor>");
 }
}
